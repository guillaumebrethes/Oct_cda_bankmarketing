import streamlit as st  # type: ignore
import pandas as pd # type: ignore
import time

# Variables 
df = pd.read_csv("bank.csv")
df_table_description = pd.read_csv("table_description.csv")
df_tableau_des_valeurs_non_d√©sir√©es = pd.read_csv('Tableau_des_valeurs_non_d√©sir√©es.csv')

# Page
st.set_page_config(
    page_title="Bank Marketing",
    page_icon="üìñ"
)

# CSS - - - - - 
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
local_css("styles.css")
# - - - - - - - 

# titre 
st.markdown('<h1 class="custom-title">Pr√©sentation des donn√©es</h1>', unsafe_allow_html=True)


# bouton de basculement vers page pr√©c√©dente
if st.button("‚óÄÔ∏è\u2003üè† Contexte"):
    st.switch_page("üè†_Projet_BankMarketing.py")
st.markdown('<hr class="my_custom_hr">', unsafe_allow_html=True)

# Texte introductif
st.write("  ")
st.markdown(
    """
    Nous avons un jeu de donn√©es qui se compose de <span class="orange-bold">11 162 lignes</span> et <span class="orange-bold">17 colonnes</span>. Il contient des valeurs <span class="orange-bold">num√©riques</span> ainsi que des valeurs <span class="orange-bold">textuelles</span>.
    
    Dans ce jeu de donn√©es nous avons des informations sur les :
    - caract√©ristiques <span class="orange-bold">socio-d√©mographiques</span> :
    
        ***(√¢ge, type d'emploi, situation familiale, niveau d'√©tudes)***
    - caract√©ristiques <span class="orange-bold">bancaires</span> des clients : 
        
        ***(solde moyen du compte, pr√™t immobilier en cours, autres pr√™ts en cours)***
    - caract√©ristiques de la <span class="orange-bold">campagne</span> : 
    
        ***(Dur√©e du dernier appel, nombre de contacts avant la campagne)***
    
    Vous pouvez visualiser les lignes que vous d√©sirez ci-dessous :
         """,unsafe_allow_html=True)

# ------------------------------------------------------------------------------------------------
# Afficher le conteneur expansible 
with st.expander(label="Contenu du Dataset", 
                 expanded=False):
    
    # Diviser l'espace en deux colonnes
    col1, col2 = st.columns(2)
    
    # Premier widget de s√©lection num√©rique pour choisir le num√©ro de la premi√®re ligne
    with col1:
        start_row = st.number_input(
            label = "Premi√®re ligne √† afficher",
            min_value = 0,  # Valeur minimale autoris√©e
            max_value = len(df) - 1,  # Nombre maximum de lignes du DataFrame
            step = 1,  # Incr√©ment
            value = 0  # Valeur par d√©faut
        )
    
    # Deuxi√®me widget de s√©lection num√©rique pour choisir le num√©ro de la derni√®re ligne
    with col2:
        end_row = st.number_input(
            label = "Derni√®re ligne √† afficher",
            min_value = start_row,  # Valeur minimale autoris√©e
            max_value = len(df),  # Nombre maximum de lignes du DataFrame
            step = 1,  # Incr√©ment
            value = min(start_row + 5, len(df))  # Valeur par d√©faut
        )

    # Afficher les lignes s√©lectionn√©es du DataFrame
    selected_df = df.iloc[start_row:end_row]
    st.dataframe(selected_df)
    
    
# ------------------------------------------------------------------------------------------------
# Affichage des doublons 
st.markdown('<hr class="my_custom_hr">', unsafe_allow_html=True)
st.write("  ")
st.write(
         "Vous pouvez afficher les doublons et les valeurs manquantes ci-dessous :"
         )

# Diviser la page en deux colonnes
col1, col2 = st.columns(2)

# Expander pour les doublons
with col1.expander(label="Afficher les doublons", expanded=False):
    st.write(df.duplicated().sum())
    st.write("   ")

# Expander pour les valeurs manquantes
with col2.expander(label="Afficher les valeurs manquantes", expanded=False):
    st.dataframe(df.isna().sum())

# ------------------------------------------------------------------------------------------------
# Variable cible 
st.markdown('<hr class="my_custom_hr">', unsafe_allow_html=True)
st.write("  ")
st.markdown(
    """
    La variable cible <span class="orange-bold">deposit</span> est une valeur bool√©√©ne, qui r√©pr√©sente la validation <span class="orange-bold">1</span> ou non validation <span class="orange-bold">0</span> du client pour le produit bancaire appel√© <span class="orange-bold">d√©p√¥t √† terme</span>. 
    
    Ce produit est souscrit par le client en deposant une somme d'argent √† la banque. Celle-ci sera bloqu√©e sur une p√©riode donn√©e g√©n√©rant des int√©rets. 
    
    Dans le jeu de donn√©es la variable cible <span class="orange-bold">deposit</span> se r√©partie en deux valeurs <span class="orange-bold">Yes</span> et <span class="orange-bold">No</span>. La page *Exploration des donn√©es* se concentre sur l'exploration de celles-ci dans leur ensemble.""",unsafe_allow_html=True)

# ------------------------------------------------------------------------------------------------
# Tableau explicatif des variables  
st.markdown('<hr class="my_custom_hr">', unsafe_allow_html=True)
st.write("  ")
st.markdown("Vous avez la possibilit√© d'afficher les variables pr√©sentes dans notre jeux de donn√©es avec leur description et leur type.")

with st.expander(label="Afficher le tableau des variables", expanded=False):
    st.markdown("### Tableau des variables")
    st.write(df_table_description)

# ------------------------------------------------------------------------------------------------
# Gestion des valeurs manquantes
st.markdown('<hr class="my_custom_hr">', unsafe_allow_html=True)
st.write("  ")
st.markdown("L'exploration des donn√©es nous a permis d'identifer que nous n'avons pas de valeur manquante. En revanche, nous avons des valeurs qui ne nous parraisent pas exploitable en l'√©tat.")


with st.expander(label="Afficher le tableau des valeurs non d√©sir√©es", expanded=False):
    st.markdown("### Tableau des valeurs non d√©sir√©s")
    st.write(df_tableau_des_valeurs_non_d√©sir√©es)


st.markdown(
    """
    Nous allons donc proc√©der √† la suppression des modalit√©s <span class="orange-bold">**¬´unknown¬ª**</span> des varibles <span class="orange-bold">job</span> et <span class="orange-bold">education</span>, car elles repr√©sentent un volume minime de notre jeu de donn√©es (respectivement 1% et 4%).

    Les variables <span class="orange-bold">pdays</span> et <span class="orange-bold">previous</span> decrivent la m√™me chose. Nous d√©cidons donc de garder qu‚Äôune seule variable <span class="orange-bold">pdays</span>. Cette derni√®re nous apporte une information en plus a savoir le nombre de jours √©coul√©s depuis le dernier contact.

    Pour la variable <span class="orange-bold">poutcome</span>, nous d√©cidons de regrouper les 2 modalit√©s <span class="orange-bold">**¬´unknown¬ª**</span> et <span class="orange-bold">**¬´other¬ª**</span> sous une m√™me modalit√© commune <span class="orange-bold">**¬´unknown¬ª**</span>, car il se peut que cela nous apporte une information suppl√©mentaire lors de nos futures exploitations.

    La variable <span class="orange-bold">contact</span>, qui a un grand nombre d‚Äôinconnues n‚Äôa aucun enjeux m√©tier, sera donc supprim√©e.
    """, unsafe_allow_html=True)


# ------------------------------------------------------------------------------------------------
# bouton de basculement de page 
st.write("   ")
st.markdown('<hr class="my_custom_hr">', unsafe_allow_html=True)
st.write("   ")

if st.button("‚ñ∂Ô∏è\u2003üìä Visualiation - Statistique"):
    st.switch_page("pages/3_üìä_Visualisation_-_Statistique.py")
    
    
    
# ------------------------------------------------------------------------------------------------


